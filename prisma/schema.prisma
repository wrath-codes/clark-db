generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Operator {
  id      String  @id @default(uuid())
  name    String
  slug    String? @unique
  cnpj    String  @unique
  website String

  plans Plan[]

  address Address?
  login   Login?
  contact Contact?

  contracts Contract[]

  @@map("operator")
}

model Employer {
  id   String  @id @default(uuid())
  name String
  slug String? @unique
  cnpj String  @unique

  broker   Broker? @relation(fields: [brokerId], references: [id])
  brokerId String?

  address Address?
  contact Contact?

  contracts Contract[]

  @@map("employer")
}

model Broker {
  id   String  @id @default(uuid())
  name String
  slug String? @unique
  cnpj String  @unique

  employers Employer[]

  address Address?

  @@map("broker")
}

model Address {
  id         String  @id @default(uuid())
  street     String
  number     Int
  complement String?
  district   String
  city       String
  state      String
  zipCode    String
  country    String  @default("Brasil")
  latitude   Float?
  longitude  Float?

  operatorId String?   @unique
  operator   Operator? @relation(fields: [operatorId], references: [id], onDelete: Cascade)

  employerId String?   @unique
  employer   Employer? @relation(fields: [employerId], references: [id], onDelete: Cascade)

  brokerId String? @unique
  broker   Broker? @relation(fields: [brokerId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Contact {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  phone     String

  operatorId String?   @unique
  operator   Operator? @relation(fields: [operatorId], references: [id], onDelete: Cascade)

  employerId String?   @unique
  employer   Employer? @relation(fields: [employerId], references: [id], onDelete: Cascade)

  @@map("contact")
}

model Plan {
  id          String  @id @default(uuid())
  name        String
  slug        String? @unique
  reach       Reach   @default(GRUPO_ESTADOS)
  ansRegister String  @unique

  obstetric  Boolean @default(false)
  outpatient Boolean @default(false)
  hospital   Boolean @default(false)

  operator   Operator @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  operatorId String

  agreements Agreement[]

  @@map("plan")
}

model Login {
  id       String @id @default(uuid())
  username String
  password String

  operatorId String?   @unique
  operator   Operator? @relation(fields: [operatorId], references: [id], onDelete: Cascade)

  @@map("login")
}

enum Reach {
  MUNICIPIO
  ESTADO
  NACIONAL
  GRUPO_MUNICIPIOS
  GRUPO_ESTADOS

  @@map("reach")
}

model Contract {
  id          String         @id @default(uuid())
  number      String         @unique
  startDate   DateTime       @default(now())
  endDate     DateTime?
  status      ContractStatus @default(VALIDO)
  description String?

  employerId String
  employer   Employer @relation(fields: [employerId], references: [id])

  operatorId String
  operator   Operator @relation(fields: [operatorId], references: [id])

  agreements Agreement[]

  @@map("contract")
}

enum ContractStatus {
  VALIDO
  CANCELADO
  EXPIRADO

  @@map("contract_status")
}

model Agreement {
  id          String  @id @default(uuid())
  description String?

  contract Contract? @relation(fields: [contractId], references: [id])
  plan     Plan?     @relation(fields: [planId], references: [id])

  contractId String?
  planId     String?

  coPayment       CoPayment?
  valuesAgreement ValuesAgreement?
  valueAgreement  ValueAgreement?
}

model CoPayment {
  id          String  @id @default(uuid())
  description String?

  percentage        Float?
  examValue         Float?
  consultationValue Float?
  admissionValue    Float?

  agreementId String    @unique
  agreement   Agreement @relation(fields: [agreementId], references: [id])

  @@map("coPayment")
}

model ValuesAgreement {
  id           String @id @default(uuid())
  age_0_18     Float
  age_19_23    Float
  age_24_28    Float
  age_29_33    Float
  age_34_38    Float
  age_39_43    Float
  age_44_48    Float
  age_49_53    Float
  age_54_58    Float
  age_59_above Float

  agreementId String    @unique
  agreement   Agreement @relation(fields: [agreementId], references: [id])

  @@map("valuesAgreement")
}

model ValueAgreement {
  id    String @id @default(uuid())
  value Float

  agreementId String    @unique
  agreement   Agreement @relation(fields: [agreementId], references: [id])

  @@map("valueAgreement")
}
